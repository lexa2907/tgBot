from django.core.management.base import BaseCommand
import telebot
from telebot import types
from telebot import apihelper
from django.db.models import F, IntegerField
import re
from django.db.models import Sum
from tgbot.models import CategoryOne, CategoryTwo, AllMenu, Users, Basket
from tgadmin.settings import BOT
from tgbot.keyboard import startmenu, newmenu, submenu, keyboard_number, menu
import json


class Command(BaseCommand):
    help = "–¢–ï–ª–µ–≥—Ä–∞–º–º –±–æ—Ç"

    def handle(self, *args, **options):
        bot = telebot.TeleBot(BOT)
        apihelper.proxy = {'https': 'socks5h://PrhZ8F:eebLU48kCY@188.130.129.144:5501'}

        def preparing_the_bucket(p, message):
            arr = p.basket_set.count()
            if arr > 0:
                object_menu = p.basket_set.all()[0]
                sum = object_menu.count * object_menu.price
                final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'), output_field=IntegerField()))
                if arr > 1:
                    arr_id = p.basket_set.values_list('id', flat=True)
                    bot.send_message(message.chat.id,
                                     text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                          f'{object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                     reply_markup=newmenu(object_menu.id, object_menu.count, arr, forward=arr_id[1],
                                                          down=arr_id[arr - 1], finite_sum=final_sum['sum']),
                                     parse_mode='markdown')
                else:
                    bot.send_message(message.chat.id,
                                     text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                          f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                     reply_markup=newmenu(object_menu.id, object_menu.count, arr,
                                                          finite_sum=final_sum['sum']),
                                     parse_mode='markdown')
            else:

                bot.send_message(message.chat.id,
                                 '–í –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ üòî\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /menu, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ',
                                 reply_markup=startmenu())

        def withdrawal_of_orders(p, message):
            count = p.orders_set.count()
            back = types.ReplyKeyboardMarkup(True, False)
            back.row('üè† –ù–∞—á–∞–ª–æ')
            product = types.InlineKeyboardMarkup(row_width=3)
            if count > 0:
                object_one = p.orders_set.all()[0]
                if count == 1:
                    but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='empty')
                    but_22 = types.InlineKeyboardButton(text='1/{}'.format(count), callback_data='empty')
                    but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='empty')
                    product.add(but_21, but_22, but_23)
                else:
                    arr_id = p.orders_set.values_list('id', flat=True)
                    but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'td|{arr_id[count - 1]}')
                    but_22 = types.InlineKeyboardButton(text='1/{}'.format(count), callback_data='empty')
                    but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'tn|{arr_id[1]}')
                    product.add(but_21, but_22, but_23)
                bot.send_message(message.chat.id, text='–ó–∞–∫–∞–∑—ã:', reply_markup=back)
                date_time = object_one.data.strftime("%d-%m-%Y %H:%M")
                if object_one.type_delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    bot.send_message(message.chat.id, text=f'–î–∞—Ç–∞: {date_time}\n'
                                                           f'–°—É–º–º–∞: {object_one.amount_to_pay} ‚ÇΩ\n'
                                                           f'–î–æ—Å—Ç–∞–≤–∫–∞: {object_one.type_delivery} '
                                                           f' {object_one.time_delivery}\n'
                                                           f'–ê–¥—Ä–µ—Å: {object_one.address_delivery}\n\n'
                                                           f'–ë–ª—é–¥–∞:\n{object_one.food}',
                                     reply_markup=product, parse_mode='markdown')
                else:
                    bot.send_message(message.chat.id, text=f'–î–∞—Ç–∞: {date_time}\n'
                                                           f'–°—É–º–º–∞: {object_one.amount_to_pay} ‚ÇΩ\n'
                                                           f'–î–æ—Å—Ç–∞–≤–∫–∞: {object_one.type_delivery} '
                                                           f' {object_one.time_delivery}\n\n'
                                                           f'–ë–ª—é–¥–∞:\n{object_one.food}',
                                     reply_markup=product, parse_mode='markdown')
            else:
                bot.send_message(message.chat.id, text='–í—ã –µ—â–µ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏')

        def update_sum(message):
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                startpg(message)
            elif message.text.isdigit():
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                min_sum = {'max_sum': int(message.text)}
                new_min_sum = json.dumps(min_sum, ensure_ascii=False)
                with open('sum.json', 'w', encoding="utf-8") as f:
                    f.write(new_min_sum)
                bot.send_message(message.chat.id, '–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —É—Å–ø–µ—à–Ω–æ', reply_markup=startmenu())
            else:
                error = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
                bot.register_next_step_handler(error, update_sum)

        def changing_the_news(message):
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                startpg(message)
            else:
                news = {'news': f'{message.text}'}
                new_news = json.dumps(news, ensure_ascii=False)
                with open('data.json', 'w', encoding="utf-8") as f:
                    f.write(new_news)
                bot.send_message(message.chat.id, '–í—ã –æ–±–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ', reply_markup=startmenu())

        @bot.message_handler(commands=['start'])
        def startpg(message):
            p, _ = Users.objects.get_or_create(name=message.chat.id,
                                               defaults={'nickname': message.from_user.first_name})
            bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=startmenu())

        @bot.message_handler(commands=['cart'])
        def commands_cart(message):
            p = Users.objects.get(name=message.chat.id)
            preparing_the_bucket(p, message)

        @bot.message_handler(commands=['menu'])
        def commands_menu(message):
            back = types.ReplyKeyboardMarkup(True, False)
            back.row('üè† –ù–∞—á–∞–ª–æ')
            bot.send_message(message.chat.id, '–ú–µ–Ω—é', reply_markup=back)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –±–ª—é–¥:', reply_markup=menu())

        @bot.message_handler(commands=['history'])
        def commands_history(message):
            p = Users.objects.get(name=message.chat.id)
            withdrawal_of_orders(p, message)

        @bot.message_handler(commands=['settings'])
        def commands_settings(message):
            back = types.ReplyKeyboardMarkup(True, False)
            back.row('–ò–º—è', '–ú–æ–±.', '–ê–¥—Ä–µ—Å')
            back.row('üè† –ù–∞—á–∞–ª–æ')
            bot.send_message(message.chat.id, '–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', reply_markup=back)

        @bot.message_handler(commands=['news'])
        def commands_news(message):
            with open('data.json', "r", encoding="utf-8") as file:
                f = json.load(file)
            back = types.ReplyKeyboardMarkup(True, False)
            back.row('üè† –ù–∞—á–∞–ª–æ')
            bot.send_message(message.chat.id, f'{f["news"]}', reply_markup=back, parse_mode='markdown')

        @bot.message_handler(commands=['admin_min_sum'])
        def update_min_sum(message):
            if Users.objects.get(id=1).name == int(message.chat.id):
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                with open('sum.json', 'r') as f:
                    max_sum = json.load(f)
                new_min_sum = bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:\n'
                                                                f'–°–µ–π—á–∞—Å: {max_sum["max_sum"]} ‚ÇΩ',
                                               reply_markup=back)
                bot.register_next_step_handler(new_min_sum, update_sum)

        @bot.message_handler(commands=['admin_news'])
        def update_news(message):
            if Users.objects.get(id=1).name == int(message.chat.id):
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                new_news = bot.send_message(message.chat.id, '–î–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –≤ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ\n'
                                                             '[ –≤–∞—à —Ç–µ–∫—Å—Ç](–≤–∞—à–∞ —Å—Å—ã–ª–∫–∞).\n–î–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è <b>–∂–∏—Ä–Ω—ã–º</b>\n'
                                                             '*–≤–∞—à —Ç–µ–∫—Å—Ç*\n'
                                                             '–î–ª—è  —Ç–µ–∫—Å—Ç–∞ —Å <i>–Ω–∞–∫–ª–æ–Ω–æ–º</i>\n_–≤–∞—à —Ç–µ–∫—Å—Ç_ ',
                                            reply_markup=back, parse_mode='html')
                bot.register_next_step_handler(new_news, changing_the_news)

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '2')
        def choice_of_delivery(message):
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            p = Users.objects.get(name=message.chat.id)
            p.status = '1'
            p.save(update_fields=["status"])
            with open('sum.json', 'r') as f:
                max_sum = json.load(f)
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                startpg(message)

            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                bot.send_message(chat_id=message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=startmenu())
                preparing_the_bucket(p, message)

            elif max_sum["max_sum"] > p.basket_sum:

                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ', 'üç¥ –ú–µ–Ω—é')
                bot.send_message(chat_id=message.chat.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {max_sum["max_sum"]} ‚ÇΩ. '
                                 f'–ó–∞–∫–∞–∂–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å /menu  ', reply_markup=back)

            elif message.text == '‚úÖ –í–µ—Ä–Ω–æ':
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –í–µ—Ä–Ω–æ')
                back.row('–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                bot.send_message(chat_id=message.chat.id, text=f'{p.delivery}\n–°—Ç–æ–∏–º–æ—Å—Ç—å - 0 ‚ÇΩ')
                if p.delivery == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º':
                    text_message = f'–£–∫–∞–∂–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑:\n–°–µ–π—á–∞—Å: {p.time_delivery}'
                else:
                    text_message = f'–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n–°–µ–π—á–∞—Å: {p.time_delivery}'
                time_delivery = bot.send_message(chat_id=message.chat.id,
                                                 text=text_message,
                                                 reply_markup=back)
                bot.register_next_step_handler(time_delivery, processing_delivery)

            elif message.text == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º' or message.text == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                p.delivery = message.text
                p.save(update_fields=["delivery"])
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –í–µ—Ä–Ω–æ')
                back.row('–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                bot.send_message(chat_id=message.chat.id, text=f'{message.text}\n–°—Ç–æ–∏–º–æ—Å—Ç—å - 0 ‚ÇΩ')
                if message.text == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º':
                    text_message = f'–£–∫–∞–∂–∏—Ç–µ –∫ –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑:\n–°–µ–π—á–∞—Å: {p.time_delivery}'
                else:
                    text_message = f'–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n–°–µ–π—á–∞—Å: {p.time_delivery}'
                time_delivery = bot.send_message(chat_id=message.chat.id, text=text_message, reply_markup=back)
                bot.register_next_step_handler(time_delivery, processing_delivery)
            else:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –í–µ—Ä–Ω–æ')
                back.row('üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º', 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                type_delivery = bot.send_message(chat_id=message.chat.id,
                                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
                                                 reply_markup=back)
                bot.register_next_step_handler(type_delivery, choice_of_delivery)

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '3')
        def replacing_address(message):
            p = Users.objects.get(name=message.chat.id)
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                p.status = '1'
                p.save(update_fields=["status"])
                startpg(message)
            elif message.text[0] == "/" or message.text.isdigit() or \
                    message.text.lower() == '–∞–¥—Ä–µ—Å' or len(message.text) > 40:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                bot.send_message(chat_id=message.chat.id,
                                 text=f'–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                      f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n',
                                 reply_markup=back)
            else:
                p.address = message.text
                p.status = '1'
                p.save(update_fields=["status","address"])
                bot.send_message(message.chat.id, '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
                commands_settings(message)

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '4')
        def number_processing(message):
            p = Users.objects.get(name=message.chat.id)
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                p.status = '1'
                p.save(update_fields=["status"])
                startpg(message)
            elif message.contact is not None:
                p.mobile = message.contact.phone_number[1:]
                p.status = '1'
                p.save(update_fields=["status","mobile"])
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
                commands_settings(message)
            elif message.text.isdigit() and len(message.text) == 11 and message.text[0] == '7':
                p.mobile = message.text
                p.status = '1'
                p.save(update_fields=["status","mobile"])
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
                commands_settings(message)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ 7')

        @bot.message_handler(content_types="contact")
        def handler_all(message):
            p = Users.objects.get(name=message.chat.id)
            p.mobile = message.contact.phone_number[1:]
            p.status = '1'
            p.save(update_fields=["status","mobile"])
            bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω')
            commands_settings(message)

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '5')
        def newName(message):
            p = Users.objects.get(name=message.chat.id)
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                p.status = '1'
                p.save(update_fields=["status"])
                startpg(message)
            elif message.text.isalpha() and len(message.text) < 30 and message.text.lower() != '–∏–º—è':
                p.status = '1'
                p.nickname = message.text
                p.save(update_fields=["status","nickname"])
                bot.send_message(message.chat.id, '–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
                commands_settings(message)
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')

        @bot.message_handler(content_types=['text'])
        def osnov(message):
            if message.text == 'üè† –ù–∞—á–∞–ª–æ':
                global nachalo
                nachalo = 'nachalo'
                startpg(message)

            elif message.text == 'üè†':
                startpg(message)

            elif message.text == 'üç¥ –ú–µ–Ω—é' or message.text == 'üç¥':
                commands_menu(message)

            elif message.text == 'üì¢ –ù–æ–≤–æ—Å—Ç–∏':
                commands_news(message)

            elif message.text == '‚ùì –ü–æ–º–æ—â—å':
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                bot.send_message(message.chat.id, '—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/menu - –ú–µ–Ω—é\n/cart - –ö–æ—Ä–∑–∏–Ω–∞\n'
                                                  '/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n/news - –ù–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏\n'
                                                  '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                 reply_markup=back)
            elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                commands_settings(message)

            elif message.text == 'üì¶ –ó–∞–∫–∞–∑—ã':
                p = Users.objects.get(name=message.chat.id)
                withdrawal_of_orders(p, message)

            elif message.text == 'üõç –ö–æ—Ä–∑–∏–Ω–∞' or message.text == 'üõç':
                p = Users.objects.get(name=message.chat.id)
                preparing_the_bucket(p, message)

            elif message.text == '–ò–º—è':
                p = Users.objects.get(name=message.chat.id)
                p.status = '5'
                p.save(update_fields=["status"])
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è: {}\n–ù–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ:'.format(p.nickname),
                                 reply_markup=back)

            elif message.text == '–ú–æ–±.':
                p = Users.objects.get(name=message.chat.id)
                p.status = '4'
                p.save(update_fields=["status"])
                back = types.ReplyKeyboardMarkup(True, False)
                button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è", request_contact=True)
                back.add(button_phone)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                if p.mobile is None:
                    bot.send_message(message.chat.id, '–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:', reply_markup=back)
                else:
                    bot.send_message(message.chat.id,'–í–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:{}\n–ù–æ–≤–æ–π –Ω–æ–º–µ—Ä:'.format(p.mobile),
                                     reply_markup=back)

            elif message.text == '–ê–¥—Ä–µ—Å':
                p = Users.objects.get(name=message.chat.id)
                p.status = '3'
                p.save(update_fields=["status"])
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ')
                if p.address is None:
                    bot.send_message(message.chat.id, '–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω', reply_markup=back)
                else:
                    bot.send_message(message.chat.id,
                                     f'–í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–æ–∫: {p.address}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:', reply_markup=back)

        @bot.callback_query_handler(func=lambda c: True)
        def inline(c):
            print(c.data)
            # –í—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é2
            p = Users.objects.get(name=c.message.chat.id)
            print(p.status)
            if c.data.split('|')[0] == 'm1':
                menu_two = types.InlineKeyboardMarkup()
                rr = CategoryOne.objects.get(id=c.data.split('|')[1])
                count = rr.categorytwo_set.count()
                arr = rr.categorytwo_set.all()
                if count % 2 == 0:
                    for i in range(0, count, 2):
                        but_1 = types.InlineKeyboardButton(text=arr[i].name, callback_data=f'm2|{arr[i].id}')
                        but_2 = types.InlineKeyboardButton(text=arr[i + 1].name, callback_data=f'm2|{arr[i+1].id}')
                        menu_two.add(but_1, but_2)
                else:
                    but_0 = types.InlineKeyboardButton(text=arr[0].name, callback_data=f'm2|{arr[0].id}')
                    menu_two.add(but_0)
                    for i in range(1, count, 2):
                        but_1 = types.InlineKeyboardButton(text=arr[i].name, callback_data=f'm2|{arr[i].id}')
                        but_2 = types.InlineKeyboardButton(text=arr[i + 1].name, callback_data=f'm2|{arr[i+1].id}')
                        menu_two.add(but_1, but_2)
                but_down = types.InlineKeyboardButton(text='–í –Ω–∞—á–∞–ª–æ –º–µ–Ω—é', callback_data='vnachalo')
                menu_two.add(but_down)
                bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                              reply_markup=menu_two)
            elif c.data == 'empty':
                bot.answer_callback_query(c.id, text="")

            elif c.data.split('|')[0] == 'max_sum':
                bot.answer_callback_query(c.id, text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {c.data.split('|')[1]} ‚ÇΩ")

            # elif c.data == 'pizza':
            #     menu_category = types.InlineKeyboardMarkup()
            #     menu_pizza = CategoryTwo.objects.get(name='–ü–∏—Ü—Ü–∞')
            #     pizza = menu_pizza.allmenu_set.all().order_by('name')
            #     count = len(pizza)
            #     menu_three = types.ReplyKeyboardMarkup(True, False)
            #     menu_three.row('üè†', 'üç¥', 'üõç')
            #     bot.send_message(c.message.chat.id, text='–ü–∏—Ü—Ü–∞', reply_markup=menu_three)
            #     for i in range(count):
            #         if i < (count - 1):
            #             if pizza[i].name == pizza[i + 1].name:
            #                 but = types.InlineKeyboardButton(text=f'{pizza[i].volume}—Å–º - {pizza[i].price} ‚ÇΩ',
            #                                                  callback_data='empty')
            #                 menu_category.add(but)
            #             else:
            #                 but = types.InlineKeyboardButton(text=f'{pizza[i].volume}—Å–º - {pizza[i].price} ‚ÇΩ',
            #                                                  callback_data='empty')
            #                 menu_category.add(but)
            #                 if pizza[i].weight is not None:
            #                     bot.send_photo(chat_id=c.message.chat.id, photo=pizza[i].photo,
            #                                    caption=f'{pizza[i].name}\n\n'
            #                                            f'–°–æ—Å—Ç–∞–≤:{pizza[i].structure}\n–í–µ—Å:{pizza[i].weight} –≥',
            #                                    reply_markup=menu_category)
            #                     menu_category = types.InlineKeyboardMarkup()
            #                 else:
            #                     bot.send_photo(chat_id=c.message.chat.id, photo=pizza[i].photo,
            #                                    caption=f'{pizza[i].name}\n\n'
            #                                            f'–°–æ—Å—Ç–∞–≤:{pizza[i].structure}', reply_markup=menu_category)
            #                     menu_category = types.InlineKeyboardMarkup()
            #         else:
            #             but = types.InlineKeyboardButton(text=f'{pizza[i].volume}—Å–º - {pizza[i].price} ‚ÇΩ',
            #                                              callback_data='empty')
            #             menu_category.add(but)
            #             if pizza[i].weight is not None:
            #                 bot.send_photo(chat_id=c.message.chat.id, photo=pizza[i].photo,
            #                                caption=f'{pizza[i].name}\n\n'
            #                                        f'–°–æ—Å—Ç–∞–≤:{pizza[i].structure}\n–í–µ—Å:{pizza[i].weight} –≥',
            #                                reply_markup=menu_category)
            #             else:
            #                 bot.send_photo(chat_id=c.message.chat.id, photo=pizza[i].photo,
            #                                caption=f'{pizza[i].name}\n\n'
            #                                        f'–°–æ—Å—Ç–∞–≤:{pizza[i].structure}', reply_markup=menu_category)
            # elif c.data.split('|')[0] == 'add_pizza':

            # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –ø–æ –∫–ª—é—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ–º –∫–Ω–æ–ø–∫–∏
            elif c.data.split('|')[0] == 'm2':
                rr = CategoryTwo.objects.get(id=c.data.split('|')[1])
                menu_three = types.ReplyKeyboardMarkup(True, False)
                menu_three.row('üè†', 'üç¥', 'üõç')
                bot.send_message(c.message.chat.id, rr.name, reply_markup=menu_three)
                bot.answer_callback_query(c.id, text="")
                for i in rr.allmenu_set.all():
                    menu_category = types.InlineKeyboardMarkup()
                    if i.volume is None:
                        but_11 = types.InlineKeyboardButton(text='1—à—Ç - {} ‚ÇΩ'.format(i.price),
                                                            callback_data=f'm3|{i.id}')
                        menu_category.add(but_11)
                        bot.send_photo(c.message.chat.id, i.photo,
                                       caption="{}\n{}\n–í–µ—Å: {}–≥".format(i.name, i.structure, i.weight),
                                       reply_markup=menu_category)
                    elif i.weight is None:
                        but_11 = types.InlineKeyboardButton(text='{}—à—Ç - {} ‚ÇΩ'.format(i.volume, i.price),
                                                            callback_data=f'm3|{i.id}')
                        menu_category.add(but_11)
                        bot.send_photo(c.message.chat.id, i.photo,
                                       caption="{}\n{}\n–û–±—ä–µ–º: {}—à—Ç.".format(i.name, i.structure, i.volume),
                                       reply_markup=menu_category)
                    else:
                        but_11 = types.InlineKeyboardButton(text='{}—à—Ç - {} ‚ÇΩ'.format(i.volume, i.price),
                                                            callback_data=f'm3|{i.id}')
                        menu_category.add(but_11)
                        bot.send_photo(c.message.chat.id, i.photo,
                                       caption="{}\n{}\n–û–±—ä–µ–º: {}—à—Ç.\n–í–µ—Å: {}–≥".format(i.name, i.structure,
                                                                                       i.volume, i.weight),
                                       reply_markup=menu_category)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç—ã–π —Ç–æ–≤–∞—Ä ,–¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã

            elif c.data.split('|')[0] == 'm3':
                if p.basket_set.filter(product_id=c.data.split('|')[1]).exists():
                    p.basket_set.filter(product_id=c.data.split('|')[1]).update(count=F('count') + 1)
                else:
                    object_menu = AllMenu.objects.get(id=c.data.split('|')[1])
                    basket, _ = Basket.objects.get_or_create(
                        product_id=c.data.split('|')[1], count=1, baskUser=p, name_product=object_menu.name,
                        photo=object_menu.photo, price=object_menu.price)
                object_product = types.InlineKeyboardMarkup()
                count = p.basket_set.get(product_id=c.data.split('|')[1]).count
                dish = AllMenu.objects.get(id=c.data.split('|')[1])
                if dish.volume is None:

                    but_11 = types.InlineKeyboardButton(text='1—à—Ç - {} ‚ÇΩ ({} —à—Ç.)'.format(dish.price, count),
                                                        callback_data=c.data)
                else:
                    but_11 = types.InlineKeyboardButton(text='{}—à—Ç - {} ‚ÇΩ ({} —à—Ç.)'.format(dish.volume, dish.price,
                                                                                           count),
                                                        callback_data=c.data)
                but_12 = types.InlineKeyboardButton(text='üõç –ö–æ—Ä–∑–∏–Ω–∞', callback_data="Korzina")
                object_product.add(but_11)
                object_product.add(but_12)
                bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                              reply_markup=object_product)
            elif c.data == 'Korzina':
                arr = p.basket_set.count()
                if arr > 0:
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'), output_field=IntegerField()))
                    object_menu = p.basket_set.all()[0]
                    sum = object_menu.count * object_menu.price
                    if arr > 1:
                        arr_id = p.basket_set.values_list('id', flat=True)
                        bot.send_message(c.message.chat.id,
                                         text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                              f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                         reply_markup=newmenu(object_menu.id, object_menu.count, arr, forward=arr_id[1],
                                                              down=arr_id[arr - 1], finite_sum=final_sum['sum']),
                                         parse_mode='markdown')
                    else:
                        bot.send_message(c.message.chat.id, text=f'{object_menu.name_product}[.]({object_menu.photo})'
                                                                 f' {object_menu.count}—à—Ç [*] '
                                                                 f'{object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                         reply_markup=newmenu(object_menu.id, object_menu.count,
                                                              arr, finite_sum=final_sum['sum']),
                                         parse_mode='markdown')
                else:

                    bot.send_message(c.message.chat.id,
                                     '–í –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ üòî\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /menu, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ',
                                     reply_markup=startmenu())

            elif c.data.split('|')[0] == 'deleting':
                try:
                    p.basket_set.get(id=c.data.split('|')[1]).delete()
                    arr = p.basket_set.count()
                    forward = 0
                    down = 0
                    if arr > 0:
                        object_menu = p.basket_set.all()[0]
                        sum = object_menu.count * object_menu.price
                        final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                           output_field=IntegerField()))
                        p.basket_sum = final_sum["sum"]
                        p.save(update_fields=["basket_sum"])
                        if arr > 1:
                            arr_id = p.basket_set.values_list('id', flat=True)
                            forward = arr_id[1]
                            down = arr_id[arr - 1]
                        bot.edit_message_text(text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                                   f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                              chat_id=c.message.chat.id, message_id=c.message.message_id,
                                              reply_markup=newmenu(object_menu.id, object_menu.count, arr,
                                                                   forward, down, finite_sum=final_sum['sum']),
                                              parse_mode='markdown')
                    else:
                        p.basket_sum = 0
                        p.save(update_fields=["basket_sum"])
                        bot.answer_callback_query(c.id, text="")
                        bot.clear_step_handler_by_chat_id(chat_id=c.message.chat.id)
                        bot.send_message(c.message.chat.id, '–í –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ üòî\n'
                                                            '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ /menu, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ',
                                         reply_markup=startmenu())
                except:
                    bot.answer_callback_query(c.id, text="")

            elif c.data.split('|')[0] == 'add':
                arr = p.basket_set.count()
                if arr == 0:
                    bot.answer_callback_query(c.id, text="")
                else:
                    p.basket_set.filter(id=c.data.split('|')[1]).update(count=F('count') + 1)
                    object_menu = p.basket_set.get(id=c.data.split('|')[1])
                    sum = object_menu.count * object_menu.price
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    p.basket_sum = final_sum["sum"]
                    p.save(update_fields=["basket_sum"])
                    bot.edit_message_text(chat_id=c.message.chat.id,message_id=c.message.message_id,
                                          text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                               f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                          reply_markup=newmenu(object_menu.id, object_menu.count, arr,
                                                               int(c.data.split('|')[2]),
                                                               int(c.data.split('|')[3]),
                                                               int(c.data.split('|')[4]),
                                                               finite_sum=final_sum['sum']),
                                          parse_mode='markdown')

            elif c.data.split('|')[0] == 'r':
                try:
                    arr = p.basket_set.count()
                    object_menu = p.basket_set.get(id=c.data.split('|')[1])
                    product = types.InlineKeyboardMarkup(row_width=4)
                    but_11 = types.InlineKeyboardButton(text='‚ùå', callback_data='deleting|{}'.format(object_menu.id))
                    but_12 = types.InlineKeyboardButton(text='üî∫',
                                                        callback_data='add|{0}|{1}|{2}|{3}'.format(object_menu.id,
                                                                                                   int(c.data.split(
                                                                                                       '|')[
                                                                                                           2]),
                                                                                                   int(c.data.split(
                                                                                                       '|')[
                                                                                                           3]),
                                                                                                   int(c.data.split(
                                                                                                       '|')[
                                                                                                           4])))
                    if object_menu.count == 1:
                        count = 1
                        but_13 = types.InlineKeyboardButton(text='{} —à—Ç.'.format(object_menu.count),
                                                            callback_data='empty')
                        but_14 = types.InlineKeyboardButton(text='üîª', callback_data='empty')

                    else:
                        p.basket_set.filter(id=c.data.split('|')[1]).update(count=F('count') - 1)
                        count = object_menu.count - 1
                        but_13 = types.InlineKeyboardButton(text='{} —à—Ç.'.format(object_menu.count - 1),
                                                            callback_data='empty')
                        but_14 = types.InlineKeyboardButton(text='üîª',
                                                            callback_data='r|{0}|{1}|{2}|{3}'.format(object_menu.id,
                                                                                                     c.data.split('|')[
                                                                                                         2],
                                                                                                     c.data.split('|')[
                                                                                                         3],
                                                                                                     c.data.split('|')[
                                                                                                         4], ))
                    if int(c.data.split('|')[2]) == 0 and int(c.data.split('|')[3]) == 0:
                        but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='empty')
                        but_22 = types.InlineKeyboardButton(text='1/{}'.format(arr), callback_data='empty')
                        but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='empty')
                    else:
                        but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è',
                                                            callback_data='down|{}'.format(int(c.data.split('|')[3])))
                        but_22 = types.InlineKeyboardButton(text='{}/{}'.format(c.data.split('|')[4], arr),
                                                            callback_data='empty')
                        but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è',
                                                            callback_data='first|{}'.format(c.data.split('|')[2]))
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    p.basket_sum = final_sum["sum"]
                    p.save(update_fields=["basket_sum"])
                    but_31 = types.InlineKeyboardButton(text=f'‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ {final_sum["sum"]} ‚ÇΩ',
                                                        callback_data='order_registration')
                    product.add(but_11, but_12, but_13, but_14)
                    product.add(but_21, but_22, but_23)
                    product.add(but_31)
                    sum = count * object_menu.price
                    bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                          text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                               f' {count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                          reply_markup=product,
                                          parse_mode='markdown')
                except:
                    bot.answer_callback_query(c.id, text="")

            elif c.data.split('|')[0] == 'down':
                try:
                    object_menu = p.basket_set.get(id=c.data.split('|')[1])
                    arr = p.basket_set.count()
                    arr_id = p.basket_set.values_list('id', flat=True)
                    sum = object_menu.count * object_menu.price
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'), output_field=IntegerField()))
                    p.basket_sum = final_sum["sum"]
                    p.save(update_fields=["basket_sum"])
                    if object_menu.id == arr_id[0]:
                        forward = arr_id[1]
                        number_str = 1
                        down = arr_id[arr - 1]

                    elif object_menu.id == arr_id[arr - 1]:
                        forward = arr_id[0]
                        number_str = arr
                        down = arr_id[arr - 2]

                    else:
                        for i in range(1, arr):
                            if object_menu.id == arr_id[i]:
                                forward = arr_id[i + 1]
                                number_str = i + 1
                                down = arr_id[i - 1]

                    bot.edit_message_text(text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                               f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                          chat_id=c.message.chat.id, message_id=c.message.message_id,
                                          reply_markup=newmenu(object_menu.id, object_menu.count,
                                                               arr, forward, down, number_str,
                                                               finite_sum=final_sum['sum']),
                                          parse_mode='markdown')
                except:
                    bot.answer_callback_query(c.id, text="")
            elif c.data.split('|')[0] == 'first':
                try:
                    object_menu = p.basket_set.get(id=c.data.split('|')[1])
                    arr = p.basket_set.count()
                    arr_id = p.basket_set.values_list('id', flat=True)
                    number_str = 1

                    sum = object_menu.count * object_menu.price
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    p.basket_sum = final_sum["sum"]
                    p.save(update_fields=["basket_sum"])
                    if object_menu.id == arr_id[arr - 1]:
                        number_str = arr
                        forward = arr_id[0]
                        down = arr_id[arr - 2]

                    elif object_menu.id == arr_id[0]:
                        forward = arr_id[1]
                        down = arr_id[arr - 1]
                    else:
                        for i in range(0, arr):
                            if arr_id[i] == object_menu.id:
                                forward = arr_id[i + 1]
                                number_str = i + 1
                                down = arr_id[i - 1]
                    bot.edit_message_text(text=f'{object_menu.name_product}[.]({object_menu.photo})\n'
                                               f' {object_menu.count}—à—Ç [*] {object_menu.price} ‚ÇΩ = {sum} ‚ÇΩ ',
                                          chat_id=c.message.chat.id, message_id=c.message.message_id,
                                          reply_markup=newmenu(object_menu.id, object_menu.count,
                                                               arr, forward, down, number_str, final_sum['sum']),
                                          parse_mode='markdown')
                except:
                    bot.answer_callback_query(c.id, text="")

            elif c.data.split('|')[0] == 'tn' or c.data.split('|')[0] == 'td':
                try:
                    id_order = int(c.data.split('|')[1])
                    count = p.orders_set.count()
                    arr_id = p.orders_set.values_list('id', flat=True)
                    object_one = p.orders_set.get(id=id_order)
                    product = types.InlineKeyboardMarkup(row_width=3)
                    if id_order == arr_id[0]:
                        but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'td|{arr_id[count - 1]}')
                        but_22 = types.InlineKeyboardButton(text='1/{}'.format(count), callback_data='empty')
                        but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'tn|{arr_id[1]}')
                        product.add(but_21, but_22, but_23)
                    elif id_order == arr_id[count - 1]:
                        but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'td|{arr_id[count - 2]}')
                        but_22 = types.InlineKeyboardButton(text='{0}/{0}'.format(count), callback_data='empty')
                        but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'tn|{arr_id[0]}')
                        product.add(but_21, but_22, but_23)
                    else:
                        for i in range(1, count):
                            if id_order == arr_id[i]:
                                but_21 = types.InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'td|{arr_id[i - 1]}')
                                but_22 = types.InlineKeyboardButton(text='{}/{}'.format(i + 1, count),
                                                                    callback_data='empty')
                                but_23 = types.InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'tn|{arr_id[i + 1]}')
                                product.add(but_21, but_22, but_23)
                    date_time = object_one.data.strftime("%d-%m-%Y %H:%M")
                    bot.edit_message_text(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                          text=f'–î–∞—Ç–∞: {date_time} \n'
                                               f'–°—É–º–º–∞: {object_one.amount_to_pay} ‚ÇΩ \n'
                                               f'–î–æ—Å—Ç–∞–≤–∫–∞: {object_one.type_delivery} '
                                               f' {object_one.time_delivery} \n'
                                               f'–ê–¥—Ä–µ—Å: {object_one.address_delivery}\n \n'
                                               f'–ë–ª—é–¥–∞: \n{object_one.food}',
                                          reply_markup=product, parse_mode='markdown')
                except:
                    bot.answer_callback_query(c.id, text="")

            elif c.data == 'order_registration' and p.status == '1':
                bot.answer_callback_query(c.id, text="")
                p.status = '2'
                p.save(update_fields=["status"])
                bot.clear_step_handler_by_chat_id(chat_id=c.message.chat.id)
                    # dick = types.InlineKeyboardMarkup(row_width=3)
                    # dick.add(types.InlineKeyboardButton(text='–ò–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', callback_data='empty'))
                    # bot.edit_message_reply_markup(c.message.chat.id, message_id=c.message.message_id, reply_markup=dick)
                if p.basket_set.count() == 0:
                    bot.answer_callback_query(c.id, text="")
                    bot.enable_save_next_step_handlers(delay=2)
                else:
                    back = types.ReplyKeyboardMarkup(True, False)
                    back.row('‚úÖ –í–µ—Ä–Ω–æ')
                    back.row('üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º', 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏')
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    bot.send_message(c.message.chat.id,
                                     f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ \n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {p.delivery}',
                                     reply_markup=back)

            # –í –Ω–∞—á–∞–ª–æ
            elif c.data == 'vnachalo':
                bot.edit_message_reply_markup(chat_id=c.message.chat.id, message_id=c.message.message_id,
                                              reply_markup=menu())
            else:
                bot.answer_callback_query(c.id, text="")

        def processing_delivery(message):
            p = Users.objects.get(name=message.chat.id)
            with open('sum.json', 'r') as f:
                max_sum = json.load(f)
            if max_sum["max_sum"] > p.basket_sum:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ', 'üç¥ –ú–µ–Ω—é')
                bot.send_message(chat_id=message.chat.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {max_sum["max_sum"]} ‚ÇΩ. '
                                 f'–ó–∞–∫–∞–∂–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å /menu  ', reply_markup=back)
            elif message.text == '‚úÖ –í–µ—Ä–Ω–æ':
                new_name = bot.send_message(chat_id=message.chat.id,
                                            text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n–°–µ–π—á–∞—Å:{p.nickname}',
                                            reply_markup=submenu())
                bot.register_next_step_handler(new_name, name_processing)

            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –í–µ—Ä–Ω–æ')
                back.row('üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º', 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                type_delivery = bot.send_message(message.chat.id,
                                                 f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {p.delivery}',
                                                 reply_markup=back)
                bot.register_next_step_handler(type_delivery, choice_of_delivery)

            elif message.text == 'üè† –ù–∞—á–∞–ª–æ':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                startpg(message)
            elif message.text == '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ':
                p.time_delivery = '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ'
                p.save(update_fields=["time_delivery"])
                new_name = bot.send_message(chat_id=message.chat.id,
                                           text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n–°–µ–π—á–∞—Å:{p.nickname}',
                                           reply_markup=submenu())
                bot.register_next_step_handler(new_name, name_processing)
            else:
                new_time = re.match(r'(2[0-3]|[0-1]\d):[0-5]\d', message.text)
                if new_time is None:
                    time_delivery = bot.send_message(chat_id=message.chat.id,
                                                     text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ(14:30)\n'
                                                          f'–°–µ–π—á–∞—Å:{p.delivery}')
                    bot.register_next_step_handler(time_delivery, processing_delivery)
                else:
                    p.time_delivery = new_time.group(0)
                    p.save(update_fields=["time_delivery"])
                    new_name = bot.send_message(chat_id=message.chat.id,
                                                text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n–°–µ–π—á–∞—Å:{p.nickname}',
                                                reply_markup=submenu())
                    bot.register_next_step_handler(new_name, name_processing)

        def name_processing(message):
            p = Users.objects.get(name=message.chat.id)
            with open('sum.json', 'r') as f:
                max_sum = json.load(f)
            if max_sum["max_sum"] > p.basket_sum:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ', 'üç¥ –ú–µ–Ω—é')
                bot.send_message(chat_id=message.chat.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {max_sum["max_sum"]} ‚ÇΩ. '
                                                               f'–ó–∞–∫–∞–∂–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å /menu  ', reply_markup=back)
            elif message.text == '‚úÖ –í–µ—Ä–Ω–æ':
                if p.mobile is None:
                    back = types.ReplyKeyboardMarkup(True, False)
                    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
                    back.add(button_phone)
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    new_number = bot.send_message(chat_id=message.chat.id,
                                                  text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n –°–µ–π—á–∞—Å:–Ω–µ —É–∫–∞–∑–∞–Ω',
                                                  reply_markup=back)
                    bot.register_next_step_handler(new_number, phone_number)
                else:
                    new_number = bot.send_message(chat_id=message.chat.id,
                                                  text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n –°–µ–π—á–∞—Å:{p.mobile}',
                                                  reply_markup=keyboard_number())
                    bot.register_next_step_handler(new_number, phone_number)
            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –í–µ—Ä–Ω–æ')
                back.row('–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                time_delivery = bot.send_message(chat_id=message.chat.id,
                                                 text=f'–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ(12:30)\n'
                                                      f'–°–µ–π—á–∞—Å: {p.time_delivery}',
                                                 reply_markup=back)
                bot.register_next_step_handler(time_delivery, processing_delivery)
            elif message.text == 'üè† –ù–∞—á–∞–ª–æ':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                startpg(message)
            elif message.text.isalpha() and len(message.text) < 30:
                p.nickname = message.text
                p.save(update_fields=["nickname"])
                if p.mobile is not None:
                    new_number = bot.send_message(chat_id=message.chat.id,
                                                  text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n –°–µ–π—á–∞—Å:{p.mobile}',
                                                  reply_markup=keyboard_number())
                    bot.register_next_step_handler(new_number, phone_number)
                else:
                    back = types.ReplyKeyboardMarkup(True, False)
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    new_number = bot.send_message(chat_id=message.chat.id,
                                                  text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n –°–µ–π—á–∞—Å:–Ω–µ —É–∫–∞–∑–∞–Ω',
                                                  reply_markup=back)
                    bot.register_next_step_handler(new_number, phone_number)
            else:
                new_name = bot.send_message(message.chat.id,
                                            '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')
                bot.register_next_step_handler(new_name, name_processing)

        def phone_number(message):
            print(message.chat.id)
            p = Users.objects.get(name=message.chat.id)
            with open('sum.json', 'r') as f:
                max_sum = json.load(f)
            if max_sum["max_sum"] > p.basket_sum:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ', 'üç¥ –ú–µ–Ω—é')
                bot.send_message(chat_id=message.chat.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {max_sum["max_sum"]} ‚ÇΩ. '
                                                               f'–ó–∞–∫–∞–∂–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å /menu  ', reply_markup=back)
            elif message.text == '‚úÖ –í–µ—Ä–Ω–æ':
                if p.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':  # —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞–±–µ—Ä—É —Å–∞–º
                    if p.address == "" or p.address is None:
                        back = types.ReplyKeyboardMarkup(True, False)
                        back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ \n'
                                                            f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f'–°–µ–π—á–∞—Å:–Ω–µ —É–∫–∞–∑–∞–Ω',
                                                       reply_markup=back)
                    else:
                        back = types.ReplyKeyboardMarkup(True, False)
                        back.row('‚úÖ –í–µ—Ä–Ω–æ')
                        back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ \n'
                                                            f' –£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f' –°–µ–π—á–∞—Å:{p.address}',
                                                       reply_markup=back)
                    bot.register_next_step_handler(new_address, address_processing)
                else:
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    back = types.ReplyKeyboardMarkup(True, False)
                    back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    ordering = bot.send_message(message.chat.id, f' *–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞*: \n'
                                                                 f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_sum["sum"]} ‚ÇΩ\n'
                                                                 f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {p.nickname} \n–¢–µ–ª–µ—Ñ–æ–Ω: {p.mobile}\n'
                                                                 f'–î–æ—Å—Ç–∞–≤–∫–∞: {p.delivery}',
                                                reply_markup=back, parse_mode='markdown')
                    bot.register_next_step_handler(ordering, ordering_process)
            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                new_name = bot.send_message(chat_id=message.chat.id,
                                            text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n –°–µ–π—á–∞—Å:{p.nickname}',
                                            reply_markup=submenu())
                bot.register_next_step_handler(new_name, name_processing)

            elif message.text == 'üè† –ù–∞—á–∞–ª–æ':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                startpg(message)
            elif message.contact is not None:
                p.mobile = message.contact.phone_number[1:]

                if p.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    if p.address == '' or p.address is None:
                        back = types.ReplyKeyboardMarkup(True, False)
                        back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ \n'
                                                            f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f'–°–µ–π—á–∞—Å:–Ω–µ —É–∫–∞–∑–∞–Ω',
                                                       reply_markup=back)
                    else:
                        back = types.ReplyKeyboardMarkup(True, False)
                        back.row('‚úÖ –í–µ—Ä–Ω–æ')
                        back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ \n'
                                                            f' –£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f' –°–µ–π—á–∞—Å:{p.address}',
                                                       reply_markup=submenu())

                    bot.register_next_step_handler(new_address, address_processing)
                else:
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    back = types.ReplyKeyboardMarkup(True, False)
                    back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    ordering = bot.send_message(message.chat.id, f'*–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:* \n'
                                                                 f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_sum["sum"]}‚ÇΩ\n'
                                                                 f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {p.nickname} \n–¢–µ–ª–µ—Ñ–æ–Ω: {p.mobile} \n'
                                                                 f'–î–æ—Å—Ç–∞–≤–∫–∞: {p.delivery}',
                                                reply_markup=back, parse_mode='markdown')
                    bot.register_next_step_handler(ordering, ordering_process)

            elif message.text.isdigit() and len(message.text) == 11 and message.text[0] == '7':
                p.mobile = message.text
                p.save(update_fields=["mobile"])
                if p.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    if p.address == '' or p.address is None:
                        back = types.ReplyKeyboardMarkup(True, False)
                        back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                                            f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f'–°–µ–π—á–∞—Å:–Ω–µ —É–∫–∞–∑–∞–Ω',
                                                       reply_markup=back)
                    else:
                        new_address = bot.send_message(chat_id=message.chat.id,
                                                       text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                                            f' –£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                            f' –°–µ–π—á–∞—Å:{p.address}',
                                                       reply_markup=submenu())

                    bot.register_next_step_handler(new_address, address_processing)
                else:
                    final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                               output_field=IntegerField()))
                    back = types.ReplyKeyboardMarkup(True, False)
                    back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                    back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                    ordering = bot.send_message(message.chat.id, f'*–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*\n'
                                                                 f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_sum["sum"]}‚ÇΩ\n'
                                                                 f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {p.nickname}\n–¢–µ–ª–µ—Ñ–æ–Ω: {p.mobile}\n'
                                                                 f'–î–æ—Å—Ç–∞–≤–∫–∞: {p.delivery}',
                                                reply_markup=back, parse_mode='markdown')
                    bot.register_next_step_handler(ordering, ordering_process)

            else:
                new_number = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ 7')
                bot.register_next_step_handler(new_number, phone_number)

        def address_processing(message):
            p = Users.objects.get(name=message.chat.id)
            with open('sum.json', 'r') as f:
                max_sum = json.load(f)
            if max_sum["max_sum"] > p.basket_sum:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('üè† –ù–∞—á–∞–ª–æ', 'üç¥ –ú–µ–Ω—é')
                bot.send_message(chat_id=message.chat.id, text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {max_sum["max_sum"]} ‚ÇΩ. '
                                                               f'–ó–∞–∫–∞–∂–∏—Ç–µ –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å /menu  ', reply_markup=back)
            elif message.text == '‚úÖ –í–µ—Ä–Ω–æ':
                final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                           output_field=IntegerField()))
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                ordering = bot.send_message(message.chat.id, f'*–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_sum["sum"]}‚ÇΩ\n'
                                                             f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {p.nickname}\n–¢–µ–ª–µ—Ñ–æ–Ω: {p.mobile}\n'
                                                             f'–î–æ—Å—Ç–∞–≤–∫–∞: {p.delivery}\n–ê–¥—Ä–µ—Å: {p.address}\n',
                                            reply_markup=back, parse_mode='markdown')
                bot.register_next_step_handler(ordering, ordering_process)
            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                new_number = bot.send_message(chat_id=message.chat.id,
                                              text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n–°–µ–π—á–∞—Å:{p.mobile}',
                                              reply_markup=keyboard_number())
                bot.register_next_step_handler(new_number, phone_number)

            elif message.text == 'üè† –ù–∞—á–∞–ª–æ':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                startpg(message)
            elif message.text[0] == "\'" or message.text.isdigit() or len(message.text) > 40:
                new_address = bot.send_message(chat_id=message.chat.id,
                                               text=f'–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                                    f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                    f'–°–µ–π—á–∞—Å:{p.address}',
                                               reply_markup=submenu())

                bot.register_next_step_handler(new_address, address_processing)
            else:
                final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                           output_field=IntegerField()))
                p.address = message.text
                p.save(update_fields=["address"])
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                ordering = bot.send_message(message.chat.id, f'*–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {final_sum["sum"]}‚ÇΩ\n'
                                                             f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {p.nickname}\n–¢–µ–ª–µ—Ñ–æ–Ω: {p.mobile}\n'
                                                             f'–î–æ—Å—Ç–∞–≤–∫–∞: {p.delivery}\n–ê–¥—Ä–µ—Å: {p.address} \n',
                                            reply_markup=back, parse_mode='markdown')
                bot.register_next_step_handler(ordering, ordering_process)

        def ordering_process(message):
            p = Users.objects.get(name=message.chat.id)
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
                p.basket_sum = 0
                p.save(update_fields=["basket_sum"])
                basket = p.basket_set.all()
                final_sum = p.basket_set.aggregate(sum=Sum(F('count') * F('price'),
                                                           output_field=IntegerField()))
                foods = ''
                for i in basket:
                    sum_food = i.count * i.price
                    foods += '{} - {}—à—Ç. = {} ‚ÇΩ\n'.format(i.name_product, i.count, sum_food)
                p.orders_set.create(amount_to_pay=final_sum['sum'], type_delivery=p.delivery,
                                    address_delivery=p.address, food=foods, time_delivery=p.time_delivery)
                bot.send_message(chat_id=Users.objects.get(id=1).name, text=f'‚ùóÔ∏è *–í–∞–º –ø—Ä–∏—à–µ–ª –∑–∞–∫–∞–∑*\n\n'
                                                                            f'üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n'
                                                                            f'{p.nickname}, {p.mobile}\n\n'
                                                                            f'üì¶ –î–æ—Å—Ç–∞–≤–∫–∞:\n{p.delivery}\n'
                                                                            f'–ê–¥—Ä–µ—Å: {p.address}\n'
                                                                            f'–í—Ä–µ–º—è: {p.time_delivery}\n\n*---*\n'
                                                                            f'üõí  –¢–æ–≤–∞—Ä—ã:\n{foods}\n*---*\n'
                                                                            f'*üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {final_sum["sum"]} ‚ÇΩ*',
                                 parse_mode='markdown')
                p.basket_set.all().delete()
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=startmenu())
            elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                if p.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    new_address = bot.send_message(chat_id=message.chat.id,
                                                   text=f'–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n'
                                                        f'–£–ª–∏—Ü—É, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ —ç—Ç–∞–∂:\n'
                                                        f'–°–µ–π—á–∞—Å:{p.address}',
                                                   reply_markup=submenu())
                    bot.register_next_step_handler(new_address, address_processing)
                else:
                    new_number = bot.send_message(chat_id=message.chat.id,
                                                  text=f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n–°–µ–π—á–∞—Å:{p.mobile}',
                                                  reply_markup=keyboard_number())
                    bot.register_next_step_handler(new_number, phone_number)

            elif message.text == 'üè† –ù–∞—á–∞–ª–æ':
                bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
                startpg(message)

            else:
                back = types.ReplyKeyboardMarkup(True, False)
                back.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                back.row('üè† –ù–∞—á–∞–ª–æ', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                error = bot.send_message(chat_id=message.chat.id,
                                         text='–í—ã–±–∏—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
                                         reply_markup=back)
                bot.register_next_step_handler(error, ordering_process)



        bot.polling(none_stop=True)
