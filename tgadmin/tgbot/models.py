from django.db import models


class Users(models.Model):
    name = models.PositiveIntegerField('id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', unique=True)
    nickname = models.CharField('–∏–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', max_length=100)
    mobile = models.CharField('–¢–µ–ª–µ—Ñ–æ–Ω', max_length=11, blank=True, null=True)
    address = models.TextField('–ê–¥—Ä–µ—Å', blank=True, null=True)
    delivery = models.CharField('–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=15, default='üöó –ü—Ä–∏–≤–µ–∑—Ç–∏')
    time_delivery = models.CharField('–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=20, default='–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
    status = models.CharField(max_length=1, default='1')
    basket_sum = models.PositiveIntegerField(default=0)

    def __str__(self):
        return '{}'.format(self.nickname)

    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'


class Orders(models.Model):
    data = models.DateTimeField('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞', auto_now_add=True)
    amount_to_pay = models.PositiveIntegerField('–°—É–º–º–∞ –≤ ‚ÇΩ')
    type_delivery = models.CharField('–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=15)
    address_delivery = models.CharField('–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=100, null=True)
    time_delivery = models.CharField('–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏', max_length=50)
    food = models.TextField('–ü–æ–∑–∏—Ü–∏–∏')
    users = models.ForeignKey(Users, models.CASCADE, verbose_name='–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    def __str__(self):
        return '{}'.format(self.users)

    class Meta:
        verbose_name = '–ó–∞–∫–∞–∑—ã '
        verbose_name_plural = '–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'


class Basket(models.Model):
    product_id = models.CharField(max_length=250, blank=True, null=True, db_index=True)
    count = models.IntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', blank=True, null=True)
    baskUser = models.ForeignKey(Users, models.CASCADE, verbose_name='–ü—Ä–æ–¥—É–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    name_product = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', max_length=250)
    photo = models.URLField('URL —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞')
    price = models.DecimalField('–¶–µ–Ω–∞', max_digits=8, decimal_places=0, default=0)

    def __str__(self):
        return self.name_product

    class Meta:
        verbose_name = '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'


class CategoryOne(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ö–Ω–∏', max_length=250)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'


class CategoryTwo(models.Model):
    name = models.CharField('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞', max_length=250)
    category_two = models.ForeignKey(CategoryOne, models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è-1', null=True, blank=True)

    class Meta:
        verbose_name = '–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
        verbose_name_plural = '–í—Ç–æ—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'

    def __str__(self):
        return self.name


class AllMenu(models.Model):
    name = models.CharField('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', max_length=250)
    structure = models.CharField('–°–æ—Å—Ç–∞–≤', max_length=250,)
    photo = models.URLField('URL —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞', blank=True, null=True)
    weight = models.DecimalField('–í–µ—Å –≤ –≥—Ä.', max_digits=7, decimal_places=0, blank=True, null=True)
    volume = models.PositiveSmallIntegerField('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ-—à—Ç(–ü–∏—Ü—Ü–∞-—Å–º)', null=True, blank=True)
    price = models.DecimalField('–¶–µ–Ω–∞', max_digits=8, decimal_places=0, default=0)
    category_two = models.ForeignKey(CategoryTwo, models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è-2')

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–æ–≤–∞—Ä'
        verbose_name_plural = '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'
